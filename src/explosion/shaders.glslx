precision highp float;

attribute vec3 position;
attribute vec2 uv;
attribute float radiusCoef;
attribute float sizeCoef;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 cameraPosition;


// fire smoke uniforms
uniform float u_radius;
uniform float u_particuleScale;
uniform float u_time;
uniform float u_height;
uniform float u_speed;
uniform float u_noiseScale;
uniform float u_circleOffset;
uniform float u_circleAmplitude;
uniform float u_intensityOffset;
uniform float u_intensityAmplitude;
uniform float u_alphaOffset;
uniform float u_alphaAmplitude;
uniform vec3 u_c1;
uniform vec3 u_c2;
uniform vec3 u_c3;
uniform vec3 u_c4;

// sparkles uniforms
uniform float u_sparkleHeight;
uniform float u_sparkleScale;
uniform float u_sparkleRadius;
uniform float u_sparkleIntensity;

varying float v_radiusCoef;
varying vec2 v_uv;
varying vec3 v_position;

#include "../shaders/utils/interpolation.glslx"
#include "../shaders/utils/model.glslx"
#include "../shaders/utils/noise.glslx"

vec3 colorRamp(vec3 color1, vec3 color2, vec3 color3, vec3 color4, float value) {
  vec3 color = mix(color1, color2, smoothstep(0.1, 0.3, value));
  color = mix(color, color3, smoothstep(0.3, 0.6, value));
  color = mix(color, color4, smoothstep(0.6, 1.0, value));
  return color;
}

float linearCircle(vec2 coordinate) {
  float centerDistance = distance(coordinate, vec2(0.5));
  return 1.0 - centerDistance;
}

float quadraticCircle(vec2 coordinate) {
  float centerDistance = distance(coordinate, vec2(0.5));
  float quadraticDistance = pow(centerDistance, 2.0);
  return 1.0 - quadraticDistance;
}

// translate model along the axe "model origin => world origin" (to increase explosion radius at the begining of animation)
// translate model along y axis (to translate the smoke to the sky)
// multiply model scale (to increase particule size)
// we transform modelMatrix instead of multiply several transformation matrix to avoid issues with multiplication order
// (for example apply scale after translation will impact translation)
// this technique also make possible to use different position and scale for each particule without using more attributes
// (we set different position and radius with mesh.position and mesh.scale)
mat4 transformModelMatrix(mat4 modelMatrix, float translateFactor, float scaleFactor, float heightOffset) {
  return mat4(
    modelMatrix[0].x * scaleFactor, modelMatrix[0].y, modelMatrix[0].z, modelMatrix[0].w,
    modelMatrix[1].x, modelMatrix[1].y * scaleFactor, modelMatrix[1].z, modelMatrix[1].w,
    modelMatrix[2].x, modelMatrix[2].y, modelMatrix[2].z * scaleFactor, modelMatrix[2].w,
    modelMatrix[3].xyz * translateFactor + vec3(0, heightOffset, 0), 1
  );
}

export void fireSmokeVertex() {
  mat4 transformedModelMatrix = transformModelMatrix(modelMatrix, u_radius, u_particuleScale, u_height);
  vec3 modelPosition = getPosition(transformedModelMatrix);
  mat4 rotation = lookAt(modelPosition, cameraPosition);
  gl_Position = projectionMatrix * viewMatrix * rotation * transformedModelMatrix * vec4(position, 1.0);

  v_uv = uv;
  v_position = modelPosition;
}

export void fireSmokeFragment() {
  float noiseFac = snoiseFractal(vec3(v_uv * u_noiseScale, v_position.x * u_time * u_speed));
  noiseFac = invLerp(-1.5, 0.4, noiseFac);
  float circle = quadraticCircle(v_uv);
  circle = invLerp(u_circleOffset, u_circleOffset + u_circleAmplitude, circle);
  float shape = circle * noiseFac;
  float intensity = invLerp(u_intensityOffset, u_intensityOffset + u_intensityAmplitude, shape);
  float alpha = invLerp(u_alphaOffset, u_alphaOffset + u_alphaAmplitude, shape);
  vec3 color = colorRamp(u_c1, u_c2, u_c3, u_c4, intensity);

  gl_FragColor = vec4(color, alpha);
}

export void fireCloudVertex() {
  vec3 particulePosition = position * u_radius * (1.0 + radiusCoef);
  particulePosition.y += u_height;
  vec4 vertexPosition = modelMatrix * vec4(particulePosition, 1.0);
  vec4 viewPosition = viewMatrix * vertexPosition;

  gl_Position = projectionMatrix * viewPosition;
  gl_PointSize = 1000.0 * u_particuleScale * sizeCoef;
  gl_PointSize /= -viewPosition.z;

  v_radiusCoef = 1.0 + radiusCoef;
}

export void fireCloudfragment() {
  vec2 uv = gl_PointCoord;
  // using v_radiusCoef in noiseFac gives to each particule a different noise
  float noiseFac = snoiseFractal(vec3(uv * u_noiseScale, v_radiusCoef * u_time * u_speed));
  noiseFac = invLerp(-1.5, 0.4, noiseFac);
  float circle = quadraticCircle(uv);
  circle = invLerp(u_circleOffset, u_circleOffset + u_circleAmplitude, circle);
  float shape = circle * noiseFac;
  float intensity = invLerp(u_intensityOffset, u_intensityOffset + u_intensityAmplitude, shape);
  float alpha = invLerp(u_alphaOffset, u_alphaOffset + u_alphaAmplitude, shape);
  vec3 color = colorRamp(u_c1, u_c2, u_c3, u_c4, intensity);

  gl_FragColor = vec4(color, alpha);
}

export void sparklesVertex() {
  vec3 particulePosition = position;
  particulePosition.xz *= u_sparkleRadius;
  particulePosition.y *= u_sparkleHeight;
  vec4 vertexPosition = modelMatrix * vec4(particulePosition, 1.0);
  vec4 viewPosition = viewMatrix * vertexPosition;

  gl_Position = projectionMatrix * viewPosition;
  gl_PointSize = 600.0 * u_sparkleScale;
  gl_PointSize /= -viewPosition.z;
}

export void sparklesFragment() {
  vec2 uv = gl_PointCoord;
  float circle = linearCircle(uv);
  float haloCircle = u_sparkleIntensity * clamp(invLerp(0.5, 10.0, circle), 0.0, 1.0);
  float lightCircle = smoothstep(0.92, 0.97, circle);

  float alpha = lightCircle + haloCircle;
  vec3 color = mix(u_c1, u_c2, smoothstep(0.8, 1.0, circle));

  gl_FragColor = vec4(color, alpha);
}
