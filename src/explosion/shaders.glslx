precision highp float;

attribute vec3 position;
attribute float radiusCoef;
attribute float sizeCoef;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;


// fire smoke uniforms
uniform float u_radius;
uniform float u_particuleScale;
uniform float u_time;
uniform float u_height;
uniform float u_speed;
uniform float u_noiseScale;
uniform float u_circleOffset;
uniform float u_circleAmplitude;
uniform float u_intensityOffset;
uniform float u_intensityAmplitude;
uniform float u_alphaOffset;
uniform float u_alphaAmplitude;
uniform vec3 u_c1;
uniform vec3 u_c2;
uniform vec3 u_c3;
uniform vec3 u_c4;

// sparkles uniforms
uniform float u_sparkleHeight;
uniform float u_sparkleScale;
uniform float u_sparkleRadius;

varying float v_radiusCoef;

#include "../shaders/utils/interpolation.glslx"
#include "../shaders/utils/noise.glslx"

vec3 colorRamp(vec3 color1, vec3 color2, vec3 color3, vec3 color4, float value) {
  vec3 color = mix(color1, color2, smoothstep(0.1, 0.3, value));
  color = mix(color, color3, smoothstep(0.3, 0.6, value));
  color = mix(color, color4, smoothstep(0.6, 1.0, value));
  return color;
}

float quadraticCircle(vec2 coordinate) {
  float centerDistance = distance(coordinate, vec2(0.5));
  float quadraticDistance = pow(centerDistance, 2.0);
  return 1.0 - quadraticDistance;
}

export void fireCloudVertex() {
  vec3 particulePosition = position * u_radius * (1.0 + radiusCoef);
  particulePosition.y += u_height;
  vec4 vertexPosition = modelMatrix * vec4(particulePosition, 1.0);
  vec4 viewPosition = viewMatrix * vertexPosition;

  gl_Position = projectionMatrix * viewPosition;
  gl_PointSize = 1000.0 * u_particuleScale * sizeCoef;
  gl_PointSize /= -viewPosition.z;

  v_radiusCoef = 1.0 + radiusCoef;
}

export void fireCloudfragment() {
  vec2 uv = gl_PointCoord;
  // using v_radiusCoef in noiseFac gives to each particule a different noise
  float noiseFac = snoiseFractal(vec3(uv * u_noiseScale, v_radiusCoef * u_time * u_speed));
  noiseFac = invLerp(-1.5, 0.4, noiseFac);
  float circle = quadraticCircle(uv);
  circle = invLerp(u_circleOffset, u_circleOffset + u_circleAmplitude, circle);
  float shape = circle * noiseFac;
  float intensity = invLerp(u_intensityOffset, u_intensityOffset + u_intensityAmplitude, shape);
  float alpha = invLerp(u_alphaOffset, u_alphaOffset + u_alphaAmplitude, shape);
  vec3 color = colorRamp(u_c1, u_c2, u_c3, u_c4, intensity);

  gl_FragColor = vec4(color, alpha);
}

export void sparklesVertex() {
  vec3 particulePosition = position;
  particulePosition.xz *= u_sparkleRadius;
  particulePosition.y *= u_sparkleHeight;
  vec4 vertexPosition = modelMatrix * vec4(particulePosition, 1.0);
  vec4 viewPosition = viewMatrix * vertexPosition;

  gl_Position = projectionMatrix * viewPosition;
  gl_PointSize = 100.0 * u_sparkleScale;
  gl_PointSize /= -viewPosition.z;
}

export void sparklesFragment() {
  vec2 uv = gl_PointCoord;
  float circle = quadraticCircle(uv);
  circle = invLerp(0.75, 1.0, circle);
  float alpha = step(0.0, circle);;
  vec3 color = mix(u_c1, u_c2, smoothstep(0.9, 1.0, circle));

  gl_FragColor = vec4(color, alpha);
}
