precision highp float;

attribute vec3 position;
attribute vec2 uv;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 cameraPosition;

// fire smoke uniforms
uniform float u_smokeScale;
uniform float u_time;
uniform float u_height;
uniform float u_noiseSpeed;
uniform float u_noiseScale;
uniform float u_circleLimit;
uniform float u_circleSmoothness;
uniform float u_intensity;
uniform float u_intensitySmoothness;
uniform float u_transparency;
uniform float u_transparencySmoothness;
uniform vec3 u_c1;
uniform vec3 u_c2;
uniform vec3 u_c3;
uniform vec3 u_c4;

// sparkles uniforms
uniform float u_sparkleHeight;
uniform float u_sparkleScale;
uniform float u_sparkleRadius;
uniform float u_sparkleIntensity;

// streaks uniforms
uniform float u_streaksRadius;
uniform float u_streaksCircleSmooth;
uniform float u_streaksNoiseOffset;
uniform float u_streaksNoiseX;
uniform float u_streaksNoiseY;
uniform float u_streaksMin;
uniform float u_streaksSmooth;
uniform float u_streaksAlpha;

// dust uniforms
uniform float u_dustRadius;
uniform float u_dustNoiseScale;
uniform float u_dustNoiseSpeed;
uniform float u_dustTransparency;
uniform float u_dustTransparencySmoothness;

varying vec2 v_uv;
varying vec3 v_position;

#include "../shaders/utils/interpolation.glslx"
#include "../shaders/utils/model.glslx"
#include "../shaders/utils/noise.glslx"

vec3 colorRamp(vec3 color1, vec3 color2, vec3 color3, vec3 color4, float value) {
  vec3 color = mix(color1, color2, smoothstep(0.1, 0.3, value));
  color = mix(color, color3, smoothstep(0.3, 0.6, value));
  color = mix(color, color4, smoothstep(0.6, 1.0, value));
  return color;
}

vec3 streaksColorRamp(vec3 color1, vec3 color2, vec3 color3, float value) {
  vec3 color = mix(color1, color2, smoothstep(0.0, 50.0, value));
  color = mix(color, color3, smoothstep(60.0, 61.0, value));
  return color;
}

float linearCircle(vec2 coordinate) {
  float centerDistance = distance(coordinate, vec2(0.5));
  return 1.0 - centerDistance;
}

float quadraticCircle(vec2 coordinate) {
  float centerDistance = distance(coordinate, vec2(0.5));
  float quadraticDistance = pow(centerDistance, 2.0);
  return 1.0 - quadraticDistance;
}

export void fireSmokeVertex() {
  mat4 transformMatrix = transform(u_smokeScale, vec3(0, u_height, 0));
  vec3 modelPosition = vec3(0, 0, 0);
  mat4 rotation = lookAt(modelPosition, cameraPosition);
  gl_Position = projectionMatrix * viewMatrix * rotation * transformMatrix * vec4(position, 1.0);

  v_uv = uv;
  v_position = getPosition(modelMatrix);
}

export void fireSmokeFragment() {
  float noiseFac = snoiseFractal(vec3(v_uv * u_noiseScale, v_position.x + u_time * u_noiseSpeed));
  noiseFac = invLerp(-1.5, 0.4, noiseFac);
  float circle = quadraticCircle(v_uv);
  circle = invLerp(u_circleLimit, u_circleLimit + u_circleSmoothness, circle);
  float shape = circle * noiseFac;
  float intensity = invLerp(u_intensity, u_intensity + u_intensitySmoothness, shape);
  float alpha = invLerp(u_transparency, u_transparency + u_transparencySmoothness, shape);
  vec3 color = colorRamp(u_c1, u_c2, u_c3, u_c4, intensity);

  gl_FragColor = vec4(color, alpha);
}

export void sparklesVertex() {
  vec3 particulePosition = position;
  particulePosition.xz *= u_sparkleRadius;
  particulePosition.y *= u_sparkleHeight;
  vec4 vertexPosition = modelMatrix * vec4(particulePosition, 1.0);
  vec4 viewPosition = viewMatrix * vertexPosition;

  gl_Position = projectionMatrix * viewPosition;
  gl_PointSize = 600.0 * u_sparkleScale;
  gl_PointSize /= -viewPosition.z;
}

export void sparklesFragment() {
  vec2 uv = gl_PointCoord;
  float circle = linearCircle(uv);
  float haloCircle = u_sparkleIntensity * clamp(invLerp(0.5, 10.0, circle), 0.0, 1.0);
  float lightCircle = smoothstep(0.8, 0.9, circle);

  float alpha = lightCircle + haloCircle;
  vec3 color = mix(u_c1, u_c2, smoothstep(0.8, 1.0, circle));

  gl_FragColor = vec4(color, alpha);
}

export void streaksVertex() {
  vec3 modelPosition = vec3(0, 0, 0);
  mat4 rotation = lookAt(modelPosition, cameraPosition);

  gl_Position = projectionMatrix * viewMatrix * rotation * modelMatrix * vec4(position, 1.0);

  v_uv = uv;
}

export void streaksFragment() {
  float centerGradient = fract(1.0 - clamp(v_uv.y - u_streaksRadius + 1.0, 0.0, 1.0));
  centerGradient = invLerp(0.0, u_streaksCircleSmooth, centerGradient);
  centerGradient = clamp(centerGradient, 0.0, 1.0);
  float sideGradient = fract(v_uv.x) * fract(1.0 - v_uv.x);
  sideGradient = invLerp(0.0, 0.1, sideGradient);
  sideGradient = clamp(sideGradient, 0.0, 1.0);

  vec3 noiseUv = vec3(v_uv.x * u_streaksNoiseX, v_uv.y * u_streaksNoiseY - u_streaksNoiseOffset, 0.0);
  float noise = snoise(noiseUv);
  noise = pow(noise, 3.0);
  noise = invLerp(0.0, 0.001, noise);
  noise -= 10.0;
  noise = max(0.0, noise);

  float factor = centerGradient * sideGradient * noise;
  factor = invLerp(u_streaksMin, u_streaksMin + u_streaksSmooth, factor);

  vec3 color = streaksColorRamp(u_c1, u_c2, u_c3, noise);
  float alpha = factor * u_streaksAlpha;

  gl_FragColor = vec4(color, alpha);
}

export void dustVertex() {
  vec3 pos = position;
  pos.xz *= u_dustRadius;
  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(pos, 1.0);

  v_uv = uv;
}

export void dustFragment() {
  vec2 uv = v_uv;
  uv.x = abs(uv.x - 0.5) * 2.0;
  float yGradiant = 1.0 - abs(uv.y - 0.5) * 2.0;
  vec2 noiseScale = vec2(10, 1);
  float noiseFac = snoiseFractal(vec3(uv * u_dustNoiseScale * noiseScale, u_time * u_dustNoiseSpeed));
  noiseFac = invLerp(-1.5, 0.4, noiseFac);

  vec3 color = u_c1;
  float alpha = invLerp(u_dustTransparency, u_dustTransparency + u_dustTransparencySmoothness, noiseFac) * yGradiant;

  gl_FragColor = vec4(color, alpha);
}
