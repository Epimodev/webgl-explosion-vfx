precision highp float;

attribute vec3 position;
attribute vec2 uv;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

uniform float u_time;
uniform float u_speed;
uniform float u_intensityOffset;
uniform float u_intensityAmplitude;
uniform float u_alphaOffset;
uniform float u_alphaAmplitude;
uniform vec3 u_c1;
uniform vec3 u_c2;
uniform vec3 u_c3;
uniform vec3 u_c4;

varying vec2 v_uv;

// #include "../utils/interpolation.glslx" already imported by noise.glslx
#include "../utils/noise.glslx"

vec3 colorRamp(vec3 color1, vec3 color2, vec3 color3, vec3 color4, float value) {
  vec3 color = mix(color1, color2, smoothstep(0.1, 0.3, value));
  color = mix(color, color3, smoothstep(0.3, 0.6, value));
  color = mix(color, color4, smoothstep(0.6, 1.0, value));
  return color;
}

float quadraticCircle(vec2 coordinate) {
  float centerDistance = distance(coordinate, vec2(0.5));
  float quadraticDistance = pow(centerDistance, 2.0);
  return 1.0 - quadraticDistance;
}

export void vertex() {
  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);

  v_uv = uv;
}

export void fragment() {
  float noiseFac = snoiseFractal(vec3(v_uv * 5.0, u_time * u_speed));
  float circle = quadraticCircle(v_uv);
  circle = remap(0.6, 1.0, 0.0, 0.5, circle);
  float shape = circle * noiseFac;
  float intensity = remap(u_intensityOffset, u_intensityOffset + u_intensityAmplitude, 0.0, 1.0, shape);
  float alpha = remap(u_alphaOffset, u_alphaOffset + u_alphaAmplitude, 0.0, 1.0, shape);
  vec3 color = colorRamp(u_c1, u_c2, u_c3, u_c4, intensity);

  gl_FragColor = vec4(color, alpha);
}
